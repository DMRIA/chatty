import discord
from discord.ext import commands
import openai

class Chatty(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

        with open("tokens.txt", "r") as f:
            self.bot.discord_token = f.readline().strip()
            self.bot.openai_token = f.readline().strip()

        self.bot.openai = openai.API(self.bot.openai_token)

    @commands.command()
    async def chatty(self, ctx):
        # Start a conversation with the user
        await ctx.send('Hello! I am Chatty, the voice curator. How can I help you today?')

        # Get the user's project information
        project_format = await ctx.send('What format is your project in? (e.g., audio, video, text)')
        project_format = await ctx.wait_for('message')
        project_format = project_format.content

        # Generate a voice for the project
        voices = []
        for i in range(1):
            voice = await self.bot.openai.Completion.create(
                engine="davinci",
                prompt=f"Please generate a voice for a {project_format} project",
                max_tokens=1000,
                temperature=0.7,
                n=1,
                stop=None,
                frequency_penalty=0,
                presence_penalty=0,
                echo=False,
            )
            voices.append(voice.choices[0].text)

        # Create an interactive story with natural language understanding
        story = await self.bot.openai.Completion.create(
            engine="davinci",
            prompt=f"Please create an interactive story for a {project_format} project",
            max_tokens=1000,
            temperature=0.7,
            n=1,
            stop=None,
            frequency_penalty=0,
            presence_penalty=0,
            echo=False,
        )
        story = story.choices[0].text

        # Send the user the generated voice and story
        await ctx.send(f'Here is the generated voice:\n\n{voices}\n\nHere is the generated story:\n\n{story}')

        # Get the user's feedback and suggestions
        feedback = await ctx.send('Please let me know if you have any feedback or suggestions.')
        feedback = await ctx.wait_for('message')
        feedback = feedback.content

        # Modify the voice and the story based on the user's feedback and suggestions
        for suggestion in feedback.split():
            if suggestion.startswith('voice'):
                voice = suggestion.split()[1]
                voices[0] = voice
            elif suggestion.startswith('story'):
                story = suggestion.split()[1]

        # Send the user the modified voice and story
        await ctx.send(f'Here is the modified voice:\n\n{voices}\n\nHere is the modified story:\n\n{story}')

        # Thank the user for using the service and ask them to rate its performance
        await ctx.send('Thank you for using my service! Please rate my performance on a scale of 1 to 5.')

def setup(bot):
    bot.add_cog(Chatty(bot))
